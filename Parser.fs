// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open GuardedCommands.Frontend.AST

# 9 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token =
  | HIGH
  | EOF
  | PRINT
  | ASG
  | SKIP
  | ABORT
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | AND
  | EQ
  | LE
  | GE
  | LT
  | GT
  | NEQ
  | COMMA
  | COLON
  | SEMI
  | BAR
  | TO
  | IF
  | FI
  | DO
  | OD
  | BEGIN
  | END
  | LP
  | LCP
  | LSP
  | RP
  | RCP
  | RSP
  | PNTR
  | ADRS
  | ITYP
  | BTYP
  | NAME of (string)
  | STRING of (string)
  | BOOL of (bool)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId =
    | TOKEN_HIGH
    | TOKEN_EOF
    | TOKEN_PRINT
    | TOKEN_ASG
    | TOKEN_SKIP
    | TOKEN_ABORT
    | TOKEN_NEG
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_AND
    | TOKEN_EQ
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_NEQ
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMI
    | TOKEN_BAR
    | TOKEN_TO
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_BEGIN
    | TOKEN_END
    | TOKEN_LP
    | TOKEN_LCP
    | TOKEN_LSP
    | TOKEN_RP
    | TOKEN_RCP
    | TOKEN_RSP
    | TOKEN_PNTR
    | TOKEN_ADRS
    | TOKEN_ITYP
    | TOKEN_BTYP
    | TOKEN_NAME
    | TOKEN_STRING
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId =
    | NONTERM__startMain
    | NONTERM__startProg
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_BasicTyp
    | NONTERM_Typ
    | NONTERM_Dec
    | NONTERM_DecL
    | NONTERM_DecList
    | NONTERM_Access
    | NONTERM_Stm
    | NONTERM_StmL
    | NONTERM_StmList
    | NONTERM_GuardedCommand
    | NONTERM_GCList
    | NONTERM_Exp

// This function maps tokens to integer indexes
let tagOfToken (t:token) =
  match t with
  | HIGH  -> 0
  | EOF  -> 1
  | PRINT  -> 2
  | ASG  -> 3
  | SKIP  -> 4
  | ABORT  -> 5
  | NEG  -> 6
  | PLUS  -> 7
  | MINUS  -> 8
  | TIMES  -> 9
  | DIV  -> 10
  | MOD  -> 11
  | AND  -> 12
  | EQ  -> 13
  | LE  -> 14
  | GE  -> 15
  | LT  -> 16
  | GT  -> 17
  | NEQ  -> 18
  | COMMA  -> 19
  | COLON  -> 20
  | SEMI  -> 21
  | BAR  -> 22
  | TO  -> 23
  | IF  -> 24
  | FI  -> 25
  | DO  -> 26
  | OD  -> 27
  | BEGIN  -> 28
  | END  -> 29
  | LP  -> 30
  | LCP  -> 31
  | LSP  -> 32
  | RP  -> 33
  | RCP  -> 34
  | RSP  -> 35
  | PNTR  -> 36
  | ADRS  -> 37
  | ITYP  -> 38
  | BTYP  -> 39
  | NAME _ -> 40
  | STRING _ -> 41
  | BOOL _ -> 42
  | INT _ -> 43

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) =
  match tokenIdx with
  | 0 -> TOKEN_HIGH
  | 1 -> TOKEN_EOF
  | 2 -> TOKEN_PRINT
  | 3 -> TOKEN_ASG
  | 4 -> TOKEN_SKIP
  | 5 -> TOKEN_ABORT
  | 6 -> TOKEN_NEG
  | 7 -> TOKEN_PLUS
  | 8 -> TOKEN_MINUS
  | 9 -> TOKEN_TIMES
  | 10 -> TOKEN_DIV
  | 11 -> TOKEN_MOD
  | 12 -> TOKEN_AND
  | 13 -> TOKEN_EQ
  | 14 -> TOKEN_LE
  | 15 -> TOKEN_GE
  | 16 -> TOKEN_LT
  | 17 -> TOKEN_GT
  | 18 -> TOKEN_NEQ
  | 19 -> TOKEN_COMMA
  | 20 -> TOKEN_COLON
  | 21 -> TOKEN_SEMI
  | 22 -> TOKEN_BAR
  | 23 -> TOKEN_TO
  | 24 -> TOKEN_IF
  | 25 -> TOKEN_FI
  | 26 -> TOKEN_DO
  | 27 -> TOKEN_OD
  | 28 -> TOKEN_BEGIN
  | 29 -> TOKEN_END
  | 30 -> TOKEN_LP
  | 31 -> TOKEN_LCP
  | 32 -> TOKEN_LSP
  | 33 -> TOKEN_RP
  | 34 -> TOKEN_RCP
  | 35 -> TOKEN_RSP
  | 36 -> TOKEN_PNTR
  | 37 -> TOKEN_ADRS
  | 38 -> TOKEN_ITYP
  | 39 -> TOKEN_BTYP
  | 40 -> TOKEN_NAME
  | 41 -> TOKEN_STRING
  | 42 -> TOKEN_BOOL
  | 43 -> TOKEN_INT
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) =
  match prodIdx with
    | 0 -> NONTERM__startMain
    | 1 -> NONTERM__startProg
    | 2 -> NONTERM_Main
    | 3 -> NONTERM_Prog
    | 4 -> NONTERM_Prog
    | 5 -> NONTERM_BasicTyp
    | 6 -> NONTERM_BasicTyp
    | 7 -> NONTERM_Typ
    | 8 -> NONTERM_Dec
    | 9 -> NONTERM_Dec
    | 10 -> NONTERM_DecL
    | 11 -> NONTERM_DecL
    | 12 -> NONTERM_DecList
    | 13 -> NONTERM_DecList
    | 14 -> NONTERM_Access
    | 15 -> NONTERM_Stm
    | 16 -> NONTERM_Stm
    | 17 -> NONTERM_Stm
    | 18 -> NONTERM_Stm
    | 19 -> NONTERM_Stm
    | 20 -> NONTERM_Stm
    | 21 -> NONTERM_Stm
    | 22 -> NONTERM_StmL
    | 23 -> NONTERM_StmL
    | 24 -> NONTERM_StmList
    | 25 -> NONTERM_StmList
    | 26 -> NONTERM_GuardedCommand
    | 27 -> NONTERM_GuardedCommand
    | 28 -> NONTERM_GCList
    | 29 -> NONTERM_GCList
    | 30 -> NONTERM_Exp
    | 31 -> NONTERM_Exp
    | 32 -> NONTERM_Exp
    | 33 -> NONTERM_Exp
    | 34 -> NONTERM_Exp
    | 35 -> NONTERM_Exp
    | 36 -> NONTERM_Exp
    | 37 -> NONTERM_Exp
    | 38 -> NONTERM_Exp
    | 39 -> NONTERM_Exp
    | 40 -> NONTERM_Exp
    | 41 -> NONTERM_Exp
    | 42 -> NONTERM_Exp
    | 43 -> NONTERM_Exp
    | 44 -> NONTERM_Exp
    | 45 -> NONTERM_Exp
    | 46 -> NONTERM_Exp
    | 47 -> NONTERM_Exp
    | 48 -> NONTERM_Exp
    | 49 -> NONTERM_Exp
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) =
  match t with
  | HIGH  -> "HIGH"
  | EOF  -> "EOF"
  | PRINT  -> "PRINT"
  | ASG  -> "ASG"
  | SKIP  -> "SKIP"
  | ABORT  -> "ABORT"
  | NEG  -> "NEG"
  | PLUS  -> "PLUS"
  | MINUS  -> "MINUS"
  | TIMES  -> "TIMES"
  | DIV  -> "DIV"
  | MOD  -> "MOD"
  | AND  -> "AND"
  | EQ  -> "EQ"
  | LE  -> "LE"
  | GE  -> "GE"
  | LT  -> "LT"
  | GT  -> "GT"
  | NEQ  -> "NEQ"
  | COMMA  -> "COMMA"
  | COLON  -> "COLON"
  | SEMI  -> "SEMI"
  | BAR  -> "BAR"
  | TO  -> "TO"
  | IF  -> "IF"
  | FI  -> "FI"
  | DO  -> "DO"
  | OD  -> "OD"
  | BEGIN  -> "BEGIN"
  | END  -> "END"
  | LP  -> "LP"
  | LCP  -> "LCP"
  | LSP  -> "LSP"
  | RP  -> "RP"
  | RCP  -> "RCP"
  | RSP  -> "RSP"
  | PNTR  -> "PNTR"
  | ADRS  -> "ADRS"
  | ITYP  -> "ITYP"
  | BTYP  -> "BTYP"
  | NAME _ -> "NAME"
  | STRING _ -> "STRING"
  | BOOL _ -> "BOOL"
  | INT _ -> "INT"

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) =
  match t with
  | HIGH  -> (null : System.Object)
  | EOF  -> (null : System.Object)
  | PRINT  -> (null : System.Object)
  | ASG  -> (null : System.Object)
  | SKIP  -> (null : System.Object)
  | ABORT  -> (null : System.Object)
  | NEG  -> (null : System.Object)
  | PLUS  -> (null : System.Object)
  | MINUS  -> (null : System.Object)
  | TIMES  -> (null : System.Object)
  | DIV  -> (null : System.Object)
  | MOD  -> (null : System.Object)
  | AND  -> (null : System.Object)
  | EQ  -> (null : System.Object)
  | LE  -> (null : System.Object)
  | GE  -> (null : System.Object)
  | LT  -> (null : System.Object)
  | GT  -> (null : System.Object)
  | NEQ  -> (null : System.Object)
  | COMMA  -> (null : System.Object)
  | COLON  -> (null : System.Object)
  | SEMI  -> (null : System.Object)
  | BAR  -> (null : System.Object)
  | TO  -> (null : System.Object)
  | IF  -> (null : System.Object)
  | FI  -> (null : System.Object)
  | DO  -> (null : System.Object)
  | OD  -> (null : System.Object)
  | BEGIN  -> (null : System.Object)
  | END  -> (null : System.Object)
  | LP  -> (null : System.Object)
  | LCP  -> (null : System.Object)
  | LSP  -> (null : System.Object)
  | RP  -> (null : System.Object)
  | RCP  -> (null : System.Object)
  | RSP  -> (null : System.Object)
  | PNTR  -> (null : System.Object)
  | ADRS  -> (null : System.Object)
  | ITYP  -> (null : System.Object)
  | BTYP  -> (null : System.Object)
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 4us; 2us; 3us; 2us; 65535us; 18us; 15us; 20us; 15us; 2us; 65535us; 18us; 19us; 20us; 21us; 2us; 65535us; 6us; 22us; 23us; 22us; 0us; 65535us; 2us; 65535us; 6us; 7us; 23us; 24us; 26us; 65535us; 6us; 28us; 8us; 28us; 26us; 52us; 29us; 52us; 33us; 28us; 36us; 52us; 39us; 52us; 44us; 28us; 48us; 28us; 50us; 52us; 55us; 52us; 58us; 52us; 60us; 52us; 76us; 52us; 77us; 52us; 78us; 52us; 79us; 52us; 80us; 52us; 81us; 52us; 82us; 52us; 83us; 52us; 84us; 52us; 85us; 52us; 86us; 52us; 87us; 52us; 88us; 52us; 5us; 65535us; 6us; 43us; 8us; 43us; 33us; 43us; 44us; 43us; 48us; 43us; 4us; 65535us; 6us; 11us; 8us; 9us; 33us; 34us; 48us; 49us; 5us; 65535us; 6us; 42us; 8us; 42us; 33us; 42us; 44us; 45us; 48us; 42us; 2us; 65535us; 36us; 37us; 39us; 40us; 3us; 65535us; 36us; 46us; 39us; 46us; 50us; 51us; 21us; 65535us; 26us; 27us; 29us; 30us; 36us; 47us; 39us; 47us; 50us; 47us; 55us; 56us; 58us; 59us; 60us; 61us; 76us; 62us; 77us; 63us; 78us; 64us; 79us; 65us; 80us; 66us; 81us; 67us; 82us; 68us; 83us; 69us; 84us; 70us; 85us; 71us; 86us; 72us; 87us; 73us; 88us; 74us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 4us; 7us; 10us; 13us; 16us; 17us; 20us; 47us; 53us; 58us; 64us; 67us; 71us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 2us; 8us; 9us; 3us; 8us; 9us; 14us; 2us; 8us; 9us; 1us; 8us; 1us; 9us; 1us; 9us; 2us; 12us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 14us; 15us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 1us; 16us; 1us; 16us; 14us; 16us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 23us; 2us; 24us; 25us; 1us; 25us; 1us; 25us; 1us; 27us; 15us; 28us; 29us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 2us; 28us; 29us; 2us; 28us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 14us; 33us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 1us; 33us; 1us; 34us; 14us; 34us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 1us; 35us; 14us; 35us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 14us; 36us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 36us; 40us; 43us; 45us; 47us; 49us; 52us; 54us; 56us; 58us; 60us; 75us; 77us; 79us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 118us; 121us; 123us; 125us; 127us; 143us; 146us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 176us; 178us; 180us; 195us; 197us; 212us; 227us; 242us; 257us; 272us; 287us; 302us; 317us; 332us; 347us; 362us; 377us; 392us; 407us; 409us; 411us; 413us; 415us; 417us; 419us; 421us; 423us; 425us; 427us; 429us; 431us; 433us; |]
let _fsyacc_action_rows = 89
let _fsyacc_actionTableElements = [|1us; 32768us; 28us; 6us; 0us; 49152us; 1us; 32768us; 28us; 6us; 0us; 49152us; 1us; 32768us; 1us; 5us; 0us; 16386us; 7us; 16406us; 2us; 26us; 4us; 31us; 5us; 32us; 24us; 36us; 26us; 39us; 31us; 33us; 40us; 17us; 1us; 32768us; 21us; 8us; 7us; 16406us; 2us; 26us; 4us; 31us; 5us; 32us; 24us; 36us; 26us; 39us; 31us; 33us; 40us; 25us; 1us; 32768us; 29us; 10us; 0us; 16387us; 1us; 32768us; 29us; 12us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 1us; 32768us; 20us; 18us; 1us; 16398us; 20us; 18us; 3us; 32768us; 36us; 20us; 38us; 14us; 39us; 13us; 0us; 16392us; 2us; 32768us; 38us; 14us; 39us; 13us; 0us; 16393us; 1us; 16396us; 19us; 23us; 1us; 32768us; 40us; 16us; 0us; 16397us; 0us; 16398us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 13us; 16399us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 12us; 82us; 13us; 83us; 14us; 84us; 15us; 85us; 16us; 87us; 17us; 86us; 18us; 88us; 36us; 75us; 1us; 32768us; 3us; 29us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 13us; 16400us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 12us; 82us; 13us; 83us; 14us; 84us; 15us; 85us; 16us; 87us; 17us; 86us; 18us; 88us; 36us; 75us; 0us; 16401us; 0us; 16402us; 7us; 16406us; 2us; 26us; 4us; 31us; 5us; 32us; 24us; 36us; 26us; 39us; 31us; 33us; 40us; 25us; 1us; 32768us; 34us; 35us; 0us; 16403us; 7us; 16410us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 1us; 32768us; 25us; 38us; 0us; 16404us; 7us; 16410us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 1us; 32768us; 27us; 41us; 0us; 16405us; 0us; 16407us; 1us; 16408us; 21us; 44us; 7us; 32768us; 2us; 26us; 4us; 31us; 5us; 32us; 24us; 36us; 26us; 39us; 31us; 33us; 40us; 25us; 0us; 16409us; 0us; 16411us; 14us; 32768us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 12us; 82us; 13us; 83us; 14us; 84us; 15us; 85us; 16us; 87us; 17us; 86us; 18us; 88us; 23us; 48us; 36us; 75us; 7us; 16406us; 2us; 26us; 4us; 31us; 5us; 32us; 24us; 36us; 26us; 39us; 31us; 33us; 40us; 25us; 1us; 16412us; 22us; 50us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 14us; 32768us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 12us; 82us; 13us; 83us; 14us; 84us; 15us; 85us; 16us; 87us; 17us; 86us; 18us; 88us; 33us; 57us; 36us; 75us; 0us; 16417us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 3us; 16418us; 9us; 77us; 10us; 78us; 11us; 79us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 12us; 16419us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 13us; 83us; 14us; 84us; 15us; 85us; 16us; 87us; 17us; 86us; 18us; 88us; 36us; 75us; 12us; 16421us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 13us; 83us; 14us; 84us; 15us; 85us; 16us; 87us; 17us; 86us; 18us; 88us; 36us; 75us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 3us; 16425us; 9us; 77us; 10us; 78us; 11us; 79us; 3us; 16426us; 9us; 77us; 10us; 78us; 11us; 79us; 12us; 16427us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 13us; 83us; 14us; 84us; 15us; 85us; 16us; 87us; 17us; 86us; 18us; 88us; 36us; 75us; 5us; 16428us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 5us; 16429us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 5us; 16430us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 5us; 16431us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 5us; 16432us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 5us; 16433us; 7us; 80us; 8us; 81us; 9us; 77us; 10us; 78us; 11us; 79us; 0us; 16420us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; 7us; 32768us; 6us; 60us; 8us; 58us; 30us; 55us; 37us; 76us; 40us; 25us; 42us; 54us; 43us; 53us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 17us; 19us; 27us; 29us; 30us; 32us; 33us; 34us; 35us; 36us; 38us; 40us; 44us; 45us; 48us; 49us; 51us; 53us; 54us; 55us; 63us; 77us; 79us; 87us; 101us; 102us; 103us; 111us; 113us; 114us; 122us; 124us; 125us; 133us; 135us; 136us; 137us; 139us; 147us; 148us; 149us; 164us; 172us; 174us; 182us; 183us; 184us; 185us; 186us; 194us; 209us; 210us; 218us; 222us; 230us; 243us; 256us; 257us; 258us; 259us; 263us; 267us; 280us; 286us; 292us; 298us; 304us; 310us; 316us; 317us; 325us; 333us; 341us; 349us; 357us; 365us; 373us; 381us; 389us; 397us; 405us; 413us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 2us; 5us; 3us; 1us; 1us; 1us; 3us; 4us; 0us; 1us; 1us; 3us; 1us; 2us; 3us; 1us; 1us; 3us; 3us; 3us; 0us; 1us; 1us; 3us; 0us; 1us; 3us; 5us; 1us; 1us; 1us; 3us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 49152us; 65535us; 16386us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 16393us; 65535us; 65535us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 16402us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 65535us; 65535us; 16405us; 16407us; 65535us; 65535us; 16409us; 16411us; 65535us; 65535us; 65535us; 65535us; 16413us; 16414us; 16415us; 16416us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [|
# 386 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 395 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startProg));
# 404 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                              _1
                   )
# 39 "Parser.fsy"
                 : Program));
# 415 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                              P(_2, _4)
                   )
# 42 "Parser.fsy"
                 : Program));
# 427 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                                              P([], _2)
                   )
# 43 "Parser.fsy"
                 : Program));
# 438 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                             BTyp
                   )
# 46 "Parser.fsy"
                 : Typ));
# 448 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                             ITyp
                   )
# 47 "Parser.fsy"
                 : Typ));
# 458 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                             _1
                   )
# 50 "Parser.fsy"
                 : Typ));
# 469 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                             VarDec(_3,_1)
                   )
# 53 "Parser.fsy"
                 : Dec));
# 481 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Typ)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                             PntrDec(_4, _1)
                   )
# 54 "Parser.fsy"
                 : Dec));
# 493 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                             []
                   )
# 57 "Parser.fsy"
                 : Dec list));
# 503 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                             _1
                   )
# 58 "Parser.fsy"
                 : Dec list));
# 514 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                             [_1]
                   )
# 61 "Parser.fsy"
                 : Dec list));
# 525 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Dec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Dec list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                             _1 :: _3
                   )
# 62 "Parser.fsy"
                 : Dec list));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                             AVar _1
                   )
# 65 "Parser.fsy"
                 : Access));
# 548 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                             PrintLn _2
                   )
# 68 "Parser.fsy"
                 : Stm));
# 559 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                             Ass(_1,_3)
                   )
# 69 "Parser.fsy"
                 : Stm));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                             Do (GC [])
                   )
# 70 "Parser.fsy"
                 : Stm));
# 581 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                             Alt (GC [])
                   )
# 71 "Parser.fsy"
                 : Stm));
# 591 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                             Block([], _2)
                   )
# 72 "Parser.fsy"
                 : Stm));
# 602 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                             Alt _2
                   )
# 73 "Parser.fsy"
                 : Stm));
# 613 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardedCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                             Do _2
                   )
# 74 "Parser.fsy"
                 : Stm));
# 624 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                             []
                   )
# 77 "Parser.fsy"
                 : Stm list));
# 634 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                             _1
                   )
# 78 "Parser.fsy"
                 : Stm list));
# 645 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                             [_1]
                   )
# 81 "Parser.fsy"
                 : Stm list));
# 656 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Stm)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                                             _1 :: _3
                   )
# 82 "Parser.fsy"
                 : Stm list));
# 668 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                             GC []
                   )
# 85 "Parser.fsy"
                 : GuardedCommand));
# 678 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (Exp * Stm list) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                             GC _1
                   )
# 86 "Parser.fsy"
                 : GuardedCommand));
# 689 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                             [(_1,_3)]
                   )
# 89 "Parser.fsy"
                 : (Exp * Stm list) list));
# 701 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Stm list)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : (Exp * Stm list) list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                         (_1,_3)::_5
                   )
# 90 "Parser.fsy"
                 : (Exp * Stm list) list));
# 714 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                             Access _1
                   )
# 93 "Parser.fsy"
                 : Exp));
# 725 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                             N _1
                   )
# 94 "Parser.fsy"
                 : Exp));
# 736 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                             B _1
                   )
# 95 "Parser.fsy"
                 : Exp));
# 747 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                             _2
                   )
# 96 "Parser.fsy"
                 : Exp));
# 758 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                             Apply("-", [_2])
                   )
# 97 "Parser.fsy"
                 : Exp));
# 769 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                             Apply("!", [_2])
                   )
# 98 "Parser.fsy"
                 : Exp));
# 780 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                             Apply("^", [_1])
                   )
# 99 "Parser.fsy"
                 : Exp));
# 791 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                             Apply("&", [_2])
                   )
# 100 "Parser.fsy"
                 : Exp));
# 802 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                             Apply("*", [_1; _3])
                   )
# 101 "Parser.fsy"
                 : Exp));
# 814 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                             Apply("/", [_1; _3])
                   )
# 102 "Parser.fsy"
                 : Exp));
# 826 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                             Apply("%", [_1; _3])
                   )
# 103 "Parser.fsy"
                 : Exp));
# 838 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                             Apply("+", [_1; _3])
                   )
# 104 "Parser.fsy"
                 : Exp));
# 850 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                             Apply("-", [_1; _3])
                   )
# 105 "Parser.fsy"
                 : Exp));
# 862 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                             Apply("&&", [_1; _3])
                   )
# 106 "Parser.fsy"
                 : Exp));
# 874 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                             Apply("=", [_1; _3])
                   )
# 107 "Parser.fsy"
                 : Exp));
# 886 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                             Apply("<=", [_1; _3])
                   )
# 108 "Parser.fsy"
                 : Exp));
# 898 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                             Apply(">=", [_1; _3])
                   )
# 109 "Parser.fsy"
                 : Exp));
# 910 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                             Apply(">", [_1; _3])
                   )
# 110 "Parser.fsy"
                 : Exp));
# 922 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                             Apply("<", [_1; _3])
                   )
# 111 "Parser.fsy"
                 : Exp));
# 934 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                             Apply("<>", [_1; _3])
                   )
# 112 "Parser.fsy"
                 : Exp));
|]
# 947 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> =
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken;
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) ->
                              match parse_error_rich with
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
let Prog lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 2))
